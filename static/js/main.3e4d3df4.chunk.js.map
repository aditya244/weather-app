{"version":3,"sources":["Components/Weather/Weather.js","Components/Form/Form.js","Components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["Weather","react_default","a","createElement","className","this","props","count","city","temp","humid","des","error","errorMessage","Component","Form","onSubmit","weather","type","name","placeholder","title","Api_Key","App","state","temperature","undefined","country","humidity","description","getWeather","_callee","e","api_call","response","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","cod","_this","setState","Math","round","main","sys","message","stop","Title","Components_Form_Form","Components_Weather_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e4d3df4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Weather extends Component{\r\n    render() {\r\n        return(\r\n            <div className=\"Weather\">\r\n                <p className=\"heading\"> <strong>Weather Details</strong> </p>\r\n                {\r\n                    this.props.count && this.props.city && <p className=\"text\"> Location: <span>   \r\n                        {this.props.city}, {this.props.count}\r\n                    </span></p>\r\n                }\r\n                {\r\n                    this.props.temp && <p className=\"text\">Tempreture : {this.props.temp}</p>\r\n                }\r\n                {\r\n                    this.props.humid && <p className=\"text\">Humidity : {this.props.humid}</p> \r\n                }\r\n                {\r\n                    this.props.des &&  <p className=\"text\">Conditions : {this.props.des}</p>\r\n                }\r\n                {\r\n                    this.props.error && <p className=\"text\">{this.props.error}</p>\r\n                }\r\n\r\n                <p>{this.props.errorMessage}</p>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Weather;","import React from 'react';\r\nimport '../../App.css';\r\n\r\nconst Form = (props) => {\r\n        return(\r\n            <div className=\"Form\" onSubmit={props.weather}>\r\n                <p className=\"heading\"><strong>Form Component </strong> </p>\r\n                <form >\r\n                    <input type =\"text\" name=\"city\" className= \"input_style\" placeholder=\"City...\"></input>\r\n                    <input type=\"text\" name=\"country\" className= \"input_style\" placeholder=\"Country...\"></input>\r\n                    <p>\r\n                        <button className= \"button_style\">Get Weather Conditions</button>\r\n                    </p>\r\n                </form>\r\n            </div>\r\n        )\r\n    };\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst title = (props) => (\r\n    <div className=\"Title\">\r\n        <p className=\"heading\"><strong>Weather Scanner</strong>  </p>\r\n        <p className=\"text\"> Just enter the name of the city and country, this app will\r\n            forecast you the weather conditions.\r\n        </p>\r\n    </div>\r\n)\r\n\r\nexport default title;","import React, { Component } from 'react';\nimport './App.css';\nimport Weather from './Components/Weather/Weather';\nimport Form from './Components/Form/Form';\nimport Title from './Components/Title/Title';\n\nconst Api_Key = \"9f5a403a5d4989a00948bf911a36c039\";\n\nclass App extends Component{\n    state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined,\n      errorMessage: undefined\n  }\n\n  getWeather = async (e) => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_call = await \n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n         // .catch((error) => response.state(404) = console.log('Please enter the correct values'));\n      const response = await api_call.json();\n      console.log(response)\n      //const errorMessage = \"Please make sure you spell the city and country name correctly.\"\n      if(response.cod === 200){\n        if(city && country){\n          this.setState({\n            temperature: Math.round((response.main.temp - 273.15)) ,\n            city: response.name,\n            country: response.sys.country,\n            humidity: response.main.humidity,\n            description: response.weather[0].description,\n            error: \"\"\n        })\n        } else {\n          this.setState({\n            error: \"Please enter the values\"\n          })\n        }\n      } else {\n        this.setState({\n         // errorMessage : 'Please make sure you spell the city and country name correctly.'\n          errorMessage: response.message\n        })\n      }\n        \n      console.log(response)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Title/>\n        <Form weather={this.getWeather}/>\n        <Weather \n          temp = {this.state.temperature}\n          city = {this.state.city}\n          count = { this.state.country}\n          humid = {this.state.humidity}\n          des = {this.state.description}\n          error = {this.state.error}\n          errorMessage = {this.state.errorMessage}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}